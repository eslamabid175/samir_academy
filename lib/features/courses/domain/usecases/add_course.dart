import 'package:dartz/dartz.dart';
import 'package:equatable/equatable.dart';
import 'package:samir_academy/core/error/failures.dart';
import 'package:samir_academy/core/usecases/usecase.dart';
import '../entities/course.dart';
import '../repositories/course_repository.dart';

class AddCourse implements UseCase< void, AddCourseParams> {
  final CourseRepository repository;

  AddCourse(this.repository);

  @override
  Future<Either<Failure, void>> call(AddCourseParams params) async {
    // Create a Course entity from params
    // Note: ID might be generated by Firestore, so pass a placeholder or handle appropriately
    final course = Course(
      id: '', // Firestore will generate ID
      title: params.title,
      description: params.description,
      categoryId: params.categoryId,
      imageUrl: params.imageUrl,
      // units and classrooms are handled via subcollections, keep empty here
    );
    return await repository.addCourse(course);
  }
}

class AddCourseParams extends Equatable {
  final String title;
  final String description;
  final String categoryId;
  final String imageUrl;

  const AddCourseParams({
    required this.title,
    required this.description,
    required this.categoryId,
    required this.imageUrl,
  });

  @override
  List<Object?> get props => [title, description, categoryId, imageUrl];
}

