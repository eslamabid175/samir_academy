import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:samir_academy/features/courses/domain/entities/category.dart';
import 'package:samir_academy/features/courses/presentation/bloc/course_bloc.dart'; // Import CourseBloc and its parts (including CourseEvent)

class AddCategoryScreen extends StatefulWidget {
  const AddCategoryScreen({Key? key}) : super(key: key);

  @override
  State<AddCategoryScreen> createState() => _AddCategoryScreenState();
}

class _AddCategoryScreenState extends State<AddCategoryScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _imageUrlController = TextEditingController();

  @override
  void dispose() {
    _nameController.dispose();
    _imageUrlController.dispose();
    super.dispose();
  }

  Future<void> _submitForm() async {
    if (_formKey.currentState!.validate()) {
      final category = Category(
        id: '', // ID will be generated by Firestore
        name: _nameController.text,
        imageUrl: _imageUrlController.text,
      );

      // Dispatch the AddCategoryEvent defined in course_event.dart
      context.read<CourseBloc>().add(AddCategoryEvent(category: category));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add New Category'), // TODO: Localize
      ),
      body: BlocListener<CourseBloc, CourseState>(
        listener: (context, state) {
          if (state is CourseActionSuccess) { // Assuming generic success state
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Category added successfully!'), backgroundColor: Colors.green), // TODO: Localize
            );
            Navigator.pop(context, true); // Indicate success
          } else if (state is CourseActionError) { // Assuming generic error state
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Error adding category: ${state.message}'), backgroundColor: Colors.red), // TODO: Localize
            );
          }
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: ListView(
              children: [
                TextFormField(
                  controller: _nameController,
                  decoration: const InputDecoration(labelText: 'Category Name'), // TODO: Localize
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter a category name'; // TODO: Localize
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16.0),
                TextFormField(
                  controller: _imageUrlController,
                  decoration: const InputDecoration(
                    labelText: 'Image URL', // TODO: Localize
                    hintText: 'Enter a valid image URL', // TODO: Localize
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter an image URL'; // TODO: Localize
                    }
                    // Basic URL validation
                    if (!Uri.tryParse(value)!.hasAbsolutePath || !Uri.tryParse(value)!.isAbsolute) {
                      return 'Please enter a valid URL (e.g., https://...)'; // TODO: Localize
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 32.0),
                // Use BlocBuilder for the button state if needed, or keep watch
                context.watch<CourseBloc>().state is CourseActionLoading // Assuming generic loading state
                    ? const Center(child: CircularProgressIndicator())
                    : ElevatedButton(
                  onPressed: _submitForm,
                  child: const Text('Add Category'), // TODO: Localize
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

// Removed the local definition of AddCategoryEvent
// It should use the one imported from course_bloc.dart (which includes course_event.dart)

