import 'package:flutter/material.dart';
import 'package:flutter/services.dart'; // For input formatters
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:samir_academy/features/courses/domain/entities/lesson.dart';
import 'package:samir_academy/features/courses/presentation/bloc/course_bloc.dart';

class AddLessonScreen extends StatefulWidget {
  final String courseId;
  final String unitId;

  const AddLessonScreen({Key? key, required this.courseId, required this.unitId}) : super(key: key);

  @override
  State<AddLessonScreen> createState() => _AddLessonScreenState();
}

class _AddLessonScreenState extends State<AddLessonScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _youtubeIdController = TextEditingController();
  final _orderController = TextEditingController();

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _youtubeIdController.dispose();
    _orderController.dispose();
    super.dispose();
  }

  void _submitForm() {
    if (_formKey.currentState!.validate()) {
      try {
        final lesson = Lesson(
          id: '', // ID will be generated by Firestore
          title: _titleController.text.trim(),
          description: _descriptionController.text.trim(),
          youtubeVideoId: _youtubeIdController.text.trim(),
          order: int.parse(_orderController.text.trim()),
          courseId: widget.courseId, // Make sure to pass courseId
          unitId: widget.unitId,     // Make sure to pass unitId
        );

        BlocProvider.of<CourseBloc>(context).add(AddLessonEvent(
          courseId: widget.courseId,
          unitId: widget.unitId,
          lesson: lesson,
        ));
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error: ${e.toString()}'), backgroundColor: Colors.red),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add New Lesson'),
      ),
      body: BlocListener<CourseBloc, CourseState>(
        listener: (context, state) {
          if (state is CourseActionSuccess) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Lesson added successfully!'), backgroundColor: Colors.green),
            );
            // Navigate back and potentially trigger a refresh
            Navigator.pop(context, true); // Pass true to indicate success
          } else if (state is CourseActionError) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Error adding lesson: ${state.message}'), backgroundColor: Colors.red),
            );
          }
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: ListView(
              children: [
                TextFormField(
                  controller: _titleController,
                  decoration: const InputDecoration(labelText: 'Lesson Title'),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter a title';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16.0),
                TextFormField(
                  controller: _descriptionController,
                  decoration: const InputDecoration(labelText: 'Description'),
                  maxLines: 3,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter a description';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16.0),
                TextFormField(
                  controller: _youtubeIdController,
                  decoration: const InputDecoration(labelText: 'YouTube Video ID (e.g., dQw4w9WgXcQ)'),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter a YouTube Video ID';
                    }
                    // Basic check for typical YouTube ID format (can be improved)
                    if (value.contains(' ') || value.contains('?') || value.contains('&')) {
                       return 'Please enter only the Video ID, not the full URL';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16.0),
                TextFormField(
                  controller: _orderController,
                  decoration: const InputDecoration(labelText: 'Order (e.g., 1, 2, 3)'),
                  keyboardType: TextInputType.number,
                  inputFormatters: <TextInputFormatter>[
                    FilteringTextInputFormatter.digitsOnly // Allow only digits
                  ],
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter an order number';
                    }
                    if (int.tryParse(value) == null) {
                       return 'Please enter a valid number';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 32.0),
                BlocBuilder<CourseBloc, CourseState>(
                  builder: (context, state) {
                    if (state is CourseActionLoading) {
                      return const Center(child: CircularProgressIndicator());
                    }
                    return ElevatedButton(
                      onPressed: _submitForm,
                      child: const Text('Add Lesson'),
                    );
                  },
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

